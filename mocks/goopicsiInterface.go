// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	goopicsi "github.com/opiproject/goopicsi"
	mock "github.com/stretchr/testify/mock"
)

// goopicsiInterface is an autogenerated mock type for the goopicsiInterface type
type goopicsiInterface struct {
	mock.Mock
}

// ConnectToRemoteAndExpose provides a mock function with given fields: addr
func (_m *goopicsiInterface) ConnectToRemoteAndExpose(addr string) error {
	ret := _m.Called(addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNVMeNamespace provides a mock function with given fields: id, subSystemID, volumeID, hostID
func (_m *goopicsiInterface) CreateNVMeNamespace(id string, subSystemID string, volumeID string, hostID int32) (string, error) {
	ret := _m.Called(id, subSystemID, volumeID, hostID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, int32) string); ok {
		r0 = rf(id, subSystemID, volumeID, hostID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int32) error); ok {
		r1 = rf(id, subSystemID, volumeID, hostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNVMeNamespace provides a mock function with given fields: id
func (_m *goopicsiInterface) DeleteNVMeNamespace(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExposeRemoteNVMe provides a mock function with given fields: subsystemNQN, maxNamespaces
func (_m *goopicsiInterface) ExposeRemoteNVMe(subsystemNQN string, maxNamespaces int64) (string, string, error) {
	ret := _m.Called(subsystemNQN, maxNamespaces)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int64) string); ok {
		r0 = rf(subsystemNQN, maxNamespaces)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, int64) string); ok {
		r1 = rf(subsystemNQN, maxNamespaces)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int64) error); ok {
		r2 = rf(subsystemNQN, maxNamespaces)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NVMeControllerConnect provides a mock function with given fields: id, trAddr, subnqn, trSvcID, hostnqn
func (_m *goopicsiInterface) NVMeControllerConnect(id int64, trAddr string, subnqn string, trSvcID int64, hostnqn string) error {
	ret := _m.Called(id, trAddr, subnqn, trSvcID, hostnqn)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, string, int64, string) error); ok {
		r0 = rf(id, trAddr, subnqn, trSvcID, hostnqn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NVMeControllerDisconnect provides a mock function with given fields: id
func (_m *goopicsiInterface) NVMeControllerDisconnect(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NVMeControllerGet provides a mock function with given fields: id
func (_m *goopicsiInterface) NVMeControllerGet(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NVMeControllerList provides a mock function with given fields:
func (_m *goopicsiInterface) NVMeControllerList() ([]goopicsi.NVMeConnection, error) {
	ret := _m.Called()

	var r0 []goopicsi.NVMeConnection
	if rf, ok := ret.Get(0).(func() []goopicsi.NVMeConnection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goopicsi.NVMeConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewGoopicsiInterface interface {
	mock.TestingT
	Cleanup(func())
}

// newGoopicsiInterface creates a new instance of goopicsiInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newGoopicsiInterface(t mockConstructorTestingTnewGoopicsiInterface) *goopicsiInterface {
	mock := &goopicsiInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
